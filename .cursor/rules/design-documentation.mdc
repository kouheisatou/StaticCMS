---
description:
globs:
alwaysApply: false
---
# 設計詳細仕様書管理ルール

このルールは、プロジェクトの設計フェーズで作成される設計詳細仕様書を `/doc` ディレクトリで適切に管理するためのガイドラインを定義しています。

## ドキュメント構造

プロジェクトの設計文書は以下のディレクトリ構造で管理します：

```
doc/
├── design/          # 設計詳細仕様書
├── architecture/    # アーキテクチャ設計書
├── api/            # API設計書
├── ui/             # UI/UX設計書
└── templates/      # 設計書テンプレート
```

## 設計詳細仕様書の必須項目

### 1. 基本情報
- **文書名**: `設計詳細仕様書_[機能名]_v[バージョン].md`
- **作成日**: 文書初版作成日
- **更新日**: 最終更新日
- **作成者**: 設計担当者
- **レビュア**: 設計レビュー担当者

### 2. 概要セクション
```markdown
# [機能名] 設計詳細仕様書

## 文書情報
- **作成日**: YYYY-MM-DD
- **更新日**: YYYY-MM-DD
- **作成者**: [担当者名]
- **バージョン**: 1.0
- **ステータス**: [Draft/Review/Approved]

## 変更履歴
| バージョン | 日付 | 変更内容 | 作成者 |
|-----------|------|----------|--------|
| 1.0 | YYYY-MM-DD | 初版作成 | [担当者名] |

## 1. 概要
### 1.1 目的
### 1.2 対象範囲
### 1.3 前提条件
### 1.4 制約事項
```

### 3. 機能設計セクション
```markdown
## 2. 機能設計
### 2.1 機能概要
### 2.2 機能要件
### 2.3 非機能要件
### 2.4 ユースケース図
### 2.5 画面遷移図（UI機能の場合）
```

### 4. 技術設計セクション
```markdown
## 3. 技術設計
### 3.1 アーキテクチャ概要
### 3.2 クラス設計
### 3.3 データモデル設計
### 3.4 API設計（該当する場合）
### 3.5 データベース設計（該当する場合）
```

## ファイル命名規則

### 設計詳細仕様書
- **基本形式**: `設計詳細仕様書_[機能名]_v[バージョン].md`
- **例**: `設計詳細仕様書_ユーザー管理_v1.0.md`

### アーキテクチャ設計書
- **基本形式**: `アーキテクチャ設計書_[対象範囲]_v[バージョン].md`
- **例**: `アーキテクチャ設計書_全体_v1.0.md`

### API設計書
- **基本形式**: `API設計書_[API名]_v[バージョン].md`
- **例**: `API設計書_ユーザーAPI_v1.0.md`

### UI設計書
- **基本形式**: `UI設計書_[画面名]_v[バージョン].md`
- **例**: `UI設計書_メイン画面_v1.0.md`

## プロジェクトファイルとの関連付け

設計書は以下のプロジェクトファイルと関連付けて管理します：

- メインアプリケーション: [App.kt](mdc:composeApp/src/desktopMain/kotlin/io/github/kouheisatou/static_cms/App.kt)
- エントリーポイント: [main.kt](mdc:composeApp/src/desktopMain/kotlin/io/github/kouheisatou/static_cms/main.kt)
- ビルド設定: [composeApp/build.gradle.kts](mdc:composeApp/build.gradle.kts)

## 設計書テンプレート

### 機能設計書テンプレート
```markdown
# [機能名] 設計詳細仕様書

## 文書情報
- **機能ID**: [F-001]
- **機能名**: [機能名]
- **作成日**: [YYYY-MM-DD]
- **作成者**: [担当者名]
- **関連ファイル**: 
  - 実装ファイル: [path/to/implementation.kt](mdc:path/to/implementation.kt)
  - テストファイル: [path/to/test.kt](mdc:path/to/test.kt)

## 1. 機能概要
### 1.1 機能の目的
### 1.2 機能の範囲
### 1.3 前提条件

## 2. 要件定義
### 2.1 機能要件
### 2.2 非機能要件
### 2.3 制約事項

## 3. 設計仕様
### 3.1 アーキテクチャ設計
### 3.2 クラス設計
### 3.3 メソッド設計
### 3.4 データ構造設計

## 4. インターフェース設計
### 4.1 UI設計（該当する場合）
### 4.2 API設計（該当する場合）
### 4.3 データベース設計（該当する場合）

## 5. 例外処理設計
### 5.1 例外パターン
### 5.2 エラーハンドリング

## 6. テスト設計
### 6.1 テスト観点
### 6.2 テストケース
### 6.3 テストデータ

## 7. 実装時の注意事項
### 7.1 パフォーマンス考慮事項
### 7.2 セキュリティ考慮事項
### 7.3 保守性考慮事項
```

## バージョン管理

### バージョン番号体系
- **メジャーバージョン**: 大幅な設計変更時にインクリメント
- **マイナーバージョン**: 機能追加・修正時にインクリメント
- **パッチバージョン**: 軽微な修正時にインクリメント

例: `v1.2.3`

### 変更履歴管理
```markdown
## 変更履歴
| バージョン | 日付 | 変更種別 | 変更内容 | 作成者 | レビュア |
|-----------|------|----------|----------|--------|----------|
| 1.0.0 | 2024-01-15 | 新規作成 | 初版作成 | 田中 | 佐藤 |
| 1.1.0 | 2024-01-20 | 機能追加 | ログイン機能追加 | 田中 | 佐藤 |
| 1.1.1 | 2024-01-22 | 修正 | エラーハンドリング修正 | 鈴木 | 田中 |
```

## レビュープロセス

### 設計レビューのフロー
1. **Draft**: 設計者による初版作成
2. **Review**: レビュアによる設計レビュー
3. **Revision**: 指摘事項の修正
4. **Approved**: 設計承認
5. **Implementation**: 実装開始

### レビューチェックポイント
- **機能要件**: 要件が明確に定義されているか
- **技術設計**: 実装可能で適切な設計になっているか
- **整合性**: 他の設計書との整合性が取れているか
- **保守性**: 保守しやすい設計になっているか
- **テスタビリティ**: テストしやすい設計になっているか

## ドキュメント品質基準

### 記述品質
- **明確性**: 曖昧な表現を避け、明確に記述する
- **完全性**: 必要な情報が漏れなく記載されている
- **一貫性**: 用語や記述スタイルが統一されている
- **追跡可能性**: 要件から実装まで追跡可能である

### 図表の活用
- **UML図**: クラス図、シーケンス図、ユースケース図
- **フローチャート**: 処理フローの可視化
- **画面モックアップ**: UI設計の具体化
- **ER図**: データベース設計の可視化

## 実装との同期

### 設計書の更新タイミング
- **実装前**: 設計変更が発生した場合
- **実装中**: 実装時に設計が変更になった場合
- **実装後**: 実装結果を反映する場合

### 実装との整合性確保
- 設計書と実装コードの定期的な整合性チェック
- コードレビュー時の設計書確認
- リファクタリング時の設計書更新

## 運用ルール

### 作成責任者
- **機能設計**: 機能担当開発者
- **アーキテクチャ設計**: アーキテクト
- **API設計**: API担当開発者
- **UI設計**: UI/UX担当者

### 承認プロセス
1. 設計者による自己レビュー
2. チームメンバーによるピアレビュー
3. アーキテクトによる技術レビュー
4. プロジェクトマネージャーによる最終承認

このルールに従って設計詳細仕様書を管理することで、プロジェクトの設計品質と保守性を向上させ、チーム間のコミュニケーションを円滑にします。
