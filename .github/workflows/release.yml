name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run format check
      run: ./gradlew spotlessCheck
      
    - name: Run lint check
      run: ./gradlew lintCheck
      
    - name: Run tests
      run: ./gradlew desktopTest

  build-release:
    name: Build Release Packages
    runs-on: ${{ matrix.os }}
    needs: lint-and-test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            gradle-task: packageReleaseDeb
            artifact-name: Linux-DEB
            artifact-path: composeApp/build/compose/binaries/main/deb/*.deb
          - os: windows-latest
            platform: windows
            gradle-task: packageReleaseMsi
            artifact-name: Windows-MSI
            artifact-path: composeApp/build/compose/binaries/main/msi/*.msi
          - os: macos-latest
            platform: macos
            gradle-task: packageReleaseDmg
            artifact-name: macOS-DMG
            artifact-path: composeApp/build/compose/binaries/main/dmg/*.dmg
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable (Linux/macOS)
      if: matrix.platform != 'windows'
      run: chmod +x ./gradlew
      
    - name: Build release package
      run: ./gradlew ${{ matrix.gradle-task }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-path }}
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Display structure of downloaded files
      run: |
        echo "Artifact structure:"
        find ./artifacts -type f -exec ls -la {} \;
        
    - name: Get release version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: StaticCMS ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## StaticCMS Release ${{ steps.get_version.outputs.VERSION }}
          
          ### Features
          - Windows95 レトロスタイル UI
          - GitHub統合機能
          - CSV・Markdown管理機能
          
          ### Downloads
          - **Windows**: StaticCMS installer (.msi)
          - **macOS**: StaticCMS disk image (.dmg)
          - **Linux**: StaticCMS package (.deb)
          
          ### Installation
          1. Download the appropriate file for your platform
          2. Run the installer or package manager
          3. Follow the setup instructions
          
          ### System Requirements
          - Java 17 or higher
          - Minimum 4GB RAM
          - 500MB free disk space
          
          Full changelog: https://github.com/${{ github.repository }}/compare/v${{ github.run_number }}...${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        
    - name: Upload Windows MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/Windows-MSI
        asset_name: StaticCMS-${{ steps.get_version.outputs.VERSION }}-windows.msi
        asset_content_type: application/octet-stream
        
    - name: Upload macOS DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macOS-DMG
        asset_name: StaticCMS-${{ steps.get_version.outputs.VERSION }}-macos.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/Linux-DEB
        asset_name: StaticCMS-${{ steps.get_version.outputs.VERSION }}-linux.deb
        asset_content_type: application/octet-stream 