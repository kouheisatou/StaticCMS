name: Pull Request Check

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-build:
    name: Lint and Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run format check
      run: ./gradlew spotlessCheck
      
    - name: Run lint check
      run: ./gradlew lintCheck
      
    - name: Build JAR
      run: ./gradlew desktopJar
      
    - name: Run tests
      run: ./gradlew desktopTest
      
    - name: Comment PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const status = '${{ job.status }}' === 'success' ? '‚úÖ Checks passed' : '‚ùå Checks failed';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Build Status: ${status}
            
üìã **Lint Check**: ${{ steps.lint-check.outcome || 'completed' }}
üèóÔ∏è **Build**: ${{ steps.build.outcome || 'completed' }}
üß™ **Tests**: ${{ steps.test.outcome || 'completed' }}

Commit: ${context.sha.substring(0, 7)}
Workflow: [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
          });

  quick-build:
    name: Quick Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: chmod +x ./gradlew
      
    - name: Quick build test
      run: ./gradlew desktopJar --no-daemon 